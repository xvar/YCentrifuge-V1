def data = loadProperties()

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'

android {
    compileSdkVersion 29
    defaultConfig {
        applicationId "allgoritm.com.centrifuge"
        minSdkVersion 17
        targetSdkVersion 29
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        buildConfigField("int", "API_VERSION", "1")
        buildConfigField("String", "AUTH_TOKEN", "\"${data.token_key}\"")
        buildConfigField("String", "API_HOST", "\"${data.host_key}\"")
        buildConfigField("String", "BASIC_AUTH_USER", "\"${data.user_key}\"")
        buildConfigField("String", "BASIC_AUTH_PASSWORD", "\"${data.password_key}\"")
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

androidExtensions {
    experimental = true
}

dependencies {
    implementation 'com.google.dagger:dagger:2.23.1'
    implementation 'com.google.dagger:dagger-android:2.23.1'
    implementation 'com.google.dagger:dagger-android-support:2.23.1'
    kapt 'com.google.dagger:dagger-compiler:2.23.1'
    kapt 'com.google.dagger:dagger-android-processor:2.23.1'
    implementation 'androidx.multidex:multidex:2.0.1'
    implementation 'androidx.lifecycle:lifecycle-extensions:2.0.0'
    kapt "androidx.lifecycle:lifecycle-compiler:2.0.0"
    implementation 'androidx.lifecycle:lifecycle-common-java8:2.0.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.0.0-alpha3'
    implementation 'io.reactivex.rxjava2:rxandroid:2.1.1'
    implementation 'io.reactivex.rxjava2:rxjava:2.2.9'
    implementation 'io.reactivex.rxjava2:rxkotlin:2.3.0'
    implementation 'androidx.appcompat:appcompat:1.0.2'
    implementation 'com.google.code.gson:gson:2.8.5'
    implementation 'com.squareup.okhttp3:okhttp:3.12.3'
    implementation 'com.squareup.okhttp3:logging-interceptor:3.11.0'
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
    testImplementation 'junit:junit:4.12'
    implementation project(':centrifuge')
    //implementation 'com.github.xvar:YCentrifuge-V1:0.0.2.2'
}

def loadProperties() {

    def propsFile = file('data.properties')

    if (propsFile.canRead()) {
        Properties props = new Properties()

        props.load(new FileInputStream(propsFile))

        def host = props['host'].toString()
        def user = props['user'].toString()
        def password = props['password'].toString()
        def token = props['token'].toString()

        return  [host_key: host, user_key: user, password_key: password, token_key: token]
    }
    else {
        throw new Exception("Could not read data.properties!")
    }
}
